#### EdgeR ####
"""
deffierential expression module
input: gene count table
output: differential gene expression table
"""

localrules: diffexpr

from snakemake.utils import R
import sys

edgeR = """
        # read in exp data
        rawdata <- read.delim("{INPUT}", check.names=FALSE, stringsAsFactors=FALSE)

        library('edgeR')
        library('Cairo')
        library('RColorBrewer')
        # put the data into a DGEList object
        y <- DGEList(counts=rawdata[,2:ncol(rawdata)], genes=rawdata[,1])

        # skipped annotation part
        # filter duplicated entries (None)
        o <- order(rowSums(y$counts), decreasing=TRUE)
        y <- y[o,]

        d <- duplicated(y$genes)
        y <- y[!d,]

        # filter lowly expressed genes
        keep <- rowSums(cpm(y)>1) >= 3
        y <- y[keep,]

        # calculate library size
        # normalization
        y <- calcNormFactors(y)
        # setup design matrix
        # Treatments (conditions to be compared)
        treatments <- factor({treatments})

        if (is.null({pairs})) {{
            # no paired
            design <- model.matrix(~treatments)
        }} else {{
            # paired samples
            pairs <- factor({pairs})
            data.frame(Sample=colnames(y),pairs,treatments)
            design <- model.matrix(~pairs + treatments)
        }}

        # MDS
        cols <- brewer.pal(8, "Set1")
        colcode <- cols[as.numeric(treatments)]
        CairoPNG("{prefix}.MDS.png")
        plotMDS(y,
                pch = as.numeric(treatments),
                col = colcode,
                labels = colnames(y))
        dev.off()


        rownames(design) <- colnames(y)
        # DE analysis
        y <- estimateGLMCommonDisp(y, design, verbose=TRUE)
        y <- estimateGLMTrendedDisp(y, design)
        y <- estimateGLMTagwiseDisp(y, design)
        fit <- glmFit(y, design)
        lrt <- glmLRT(fit)
        # top genes
        de_table=topTags(lrt, n=Inf, sort.by="PValue")
#        de_table = format(de_table, digit = 3)
        write.table(de_table, file="{prefix}.diffexpr.txt", sep = '\t', row.names=FALSE,na='')
        # num of de genes summary
        de <- decideTestsDGE(lrt)
        de_stat = summary(de)
        cat(c("{prefix}", de_stat[1:3], "\n"), file="{prefix}.deSummary.txt", sep = '\t', append=FALSE)

        # plot log Fold Change vs Count per Million
        CairoPNG("{prefix}.FC-CPM.png")
        detags <- rownames(y)[as.logical(de)]
        plotSmear(lrt, de.tags=detags)
        abline(h=c(-1, 1), col="blue")
        dev.off()
        """
rule edger:
    input: "expression/{exp}_vs_{ctrl}.{feature}.readcounts.txt"
    output: "tmp/edger/{exp}_vs_{ctrl}.{feature, gene|isoform}.diffexpr.txt"
    # message: """\n##### Differential expression analysis between treatment groups with ebseq
    # # rule:    edger
    # # INPUT:   {input}
    # # OUTPUT:  {output}
    # # PROGRAM: edger_R
    # """

    log: "tmp/shell_log/{exp}_vs_{ctrl}.{feature}.edger.log"
    params:
        mem = "8G",
        prefix = "tmp/edger/{exp}_vs_{ctrl}.{feature}",
        # treatments in form of c("trt_rep1", "trt_rep2", "trt_rep3", "ctrl_rep1", "ctrl_rep2", "ctrl_rep3")
        treatments = lambda wc: 'c("{}")'.format('", "'.join([wc.exp] * len(config["treatments"][wc.exp]) +
                                                             [wc.ctrl] * len(config["treatments"][wc.ctrl]))),
        # if paired make paired information in form of c("0", "1", "2", "0", "1", "2")
        pairs = lambda wc: 'c("{}")'.format('", "'.join(map(str, list(range(len(config["treatments"][wc.exp]))) +
                                               list(range(len(config["treatments"][wc.ctrl]))) ) ) ) \
                           if paired["{}:{}".format(wc.exp, wc.ctrl)] else "c()"
        # conditions=lambda wc: ','.join(map(str, (map(len, [config["treatments"][wc.exp], config["treatments"][wc.ctrl]]))))
    run:
        rscript = edgeR.format(INPUT=input,
                               prefix=params.prefix,
                               treatments=params.treatments ,
                               pairs = params.pairs)
        with open(params.prefix + "_edger.R", 'w') as rscript_out:
            rscript_out.write(rscript)
        shell("Rscript {params.prefix}_edger.R")

rule mv_edger_result:
    input: "tmp/edger/{exp}_vs_{ctrl}.{feature}.diffexpr.txt"
    output: "diff_expr/{exp}_vs_{ctrl}.{feature, gene|isoform}.diffexpr.txt"
    log: "tmp/shell_log/{exp}_vs_{ctrl}.{feature}.mv_edger_result.log"
    params:
        mem = "2G"
    shell: "mv {input} {output}"

rule filter_edger:
    input: "diff_expr/{exp}_vs_{ctrl}.{feature}.diffexpr.txt"
    output: "diff_expr/{exp}_vs_{ctrl}.{feature, gene|isoform}.onlyDE.txt"
    # message: """\n##### Differential expression analysis between treatment groups with ebseq
    # # rule:    filter_edger
    # # INPUT:   {input}
    # # OUTPUT:  {output}
    # # PROGRAM: filter
    # """
    log: "tmp/shell_log/{exp}_vs_{ctrl}.{feature}.edger_FDR.log"

    params:
        mem = "4G"
    run:
        import pandas as pd
        table_in = pd.read_table(str(input), index_col = 0)
        table_out = table_in[table_in["FDR"] <= float(config["fdr"])]
        table_out.to_csv(str(output), sep='\t')        

rule report_edger:
    input: ["diff_expr/{}_vs_{}.{}.{}.txt".format(exp,ctrl,feature,table) \
                    for exp, ctrl in zip(expGrp_lst, ctrlGrp_lst) \
                    for feature in config["features"] \
                    for table in ['diffexpr', 'onlyDE']]
    output: html="diff_expr/de_report.html", txt = "diff_expr/de_report.txt", xls = "diff_expr/differential_expression.xlsx"
    log: "tmp/pipeline_log/report_edger.log"
    params:
        mem = "8G"
    run:
        from jinja2 import Template
        import pandas as pd

        # make xlsx file to save all diff gene tables
        xls_writer = pd.ExcelWriter(output.xls, engine="xlsxwriter")
        workbook = xls_writer.book
        # Add a format. Green fill with dark green text.
        under_fmt = workbook.add_format({'bg_color': '#C6EFCE',
                                       'font_color': '#006100'})
        float_fmt = workbook.add_format({'num_format': '0.000'})
        for condition1, condition2 in zip(expGrp_lst, ctrlGrp_lst):
          for ftr in config["features"]:
            fn = "diff_expr/{}_vs_{}.{}.diffexpr.txt".format(condition1, condition2, ftr)
            df = pd.read_table(fn)
            number_rows = len(df.index)
            # sheet name is no more than 31 char
            compare_name = "{} - {}".format(condition1, condition2)
            sh_name = compare_name + " " + ftr if len(compare_name) < 30 - len(ftr) else compare_name[:28-len(ftr)]+"..."+ftr
            df.to_excel(xls_writer, startrow=1, index=False, sheet_name=sh_name)
            worksheet = xls_writer.sheets[sh_name]
            worksheet.set_header("")
            # 3 digits
            worksheet.set_column('B:F', 12, float_fmt)
            # highlight FDR
            worksheet.conditional_format("F2:F{}".format(number_rows +1),
                                         {'type': 'cell',
                                             'criteria': '<',
                                             'value': 0.05,
                                             'format': under_fmt})
            # add filter
            worksheet.autofilter('B1:B{}'.format(number_rows +1)) # logFC
            worksheet.autofilter('F1:F{}'.format(number_rows +1)) # FDR

            # add plots
            worksheet.write('H1', 'MA plot - Folder change vs average expression')
            worksheet.insert_image('H2', 'tmp/edger/{}_vs_{}.{}.FC-CPM.png'.format(condition1, condition2, ftr), {'x_offset': 15, 'y_offset': 10})
            worksheet.write('H30', 'MDS plot - similarity between samples')
            worksheet.insert_image('H31', 'tmp/edger/{}_vs_{}.{}.MDS.png'.format(condition1, condition2, ftr), {'x_offset': 15, 'y_offset': 10})
        xls_writer.save()

        # diff gene summaries
        header = "Condition1,Replicates,Condition2,Replicates,Total Expressed Genes,DE Genes".split(',')
        table_content  = []

        # gene table file list
        file_list = []
        for condition1, condition2 in zip(expGrp_lst, ctrlGrp_lst):
            fn = "diff_expr/{}_vs_{}.gene.diffexpr.txt".format(condition1, condition2)
            # file_list.append(fn)
            with open(fn) as f_in:
                line_count = sum(1 for _ in f_in)  # _ is a throwaway variable
            total_gene = line_count - 1            # remove the header line

            fn = "diff_expr/{}_vs_{}.gene.onlyDE.txt".format(condition1, condition2)
            file_list.append(fn)
            with open(fn) as f_in:
                line_count = sum(1 for _ in f_in)
            de_gene = line_count - 1
            table_content.append([condition1, "<br>".join(config["treatments"][condition1]), \
                                  condition2, "<br>".join(config["treatments"][condition2]), \
                                  total_gene, de_gene])

        # write DE summary table
        table_df = pd.DataFrame(table_content, columns=header)  
        table_df.to_csv(output.txt, sep="\t", index=False)

        # add links to the gene table
        table_df['DE Genes'] = '<a href="#tab-' + (table_df.index + 1).map(str) + '">' + table_df['DE Genes'].map(str) +'</a>'
        #'<a href="#' + table_df["Condition1"] + '_' + table_df["Condition2"] + '">' + table_df['DE Genes'].map(str) + '</a>'
        summary_html = table_df.to_html(classes="brc", escape=False, index=False)

        # write gene table

        html_template = Template("""
        <div class=tabs>
            {% for e, c, gt_tbl in labeled_gt %}
            <div id=tab-{{ loop.index }}> <a href="#tab-{{ loop.index }}">{{ e }}_vs_{{ c }}</a>
                {{ gt_tbl }}

            </div>
            {% endfor %}
        </div>
        <div>Only differentially expressed genes are shown. Full gene table see `*.gene.diffexpr.txt` files in `diff_expr` folder.</div>

        <link rel="stylesheet" href="http://cdn.pydata.org/bokeh/release/bokeh-0.9.2.min.css" type="text/css" />
        <script type="text/javascript" src="http://cdn.pydata.org/bokeh/release/bokeh-0.9.2.min.js"></script>
        {{ grid_js }}
        """)

        grid_js, gt_divs = table_to_html(file_list)
        if type(gt_divs) == str:
            # single element list
            gt_divs = [gt_divs]
        de_html = html_template.render(labeled_gt=zip(expGrp_lst, ctrlGrp_lst, gt_divs), grid_js=grid_js)

        with open(output.html, 'w') as f_out:
            #write out summary table
            f_out.write("""
            <div id="de-summary">
            {}
            </div>
            <hr></hr>
            {}
            """.format(summary_html, de_html) )



rule diffexpr:
    input: "diff_expr/differential_expression.xlsx"
