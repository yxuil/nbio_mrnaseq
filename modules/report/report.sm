localrules: versions,report

rule versions:
    output: "tmp/software_version.html"
    params: mem = "1G"
    run:
        import re
        from rpy2 import robjects
        from collections import OrderedDict
        import pandas as pd

        softwares = OrderedDict()

        skewer_ver =  subprocess.check_output('echo `/mnt/software/skewer -v`', shell=True)
        softwares["skewer"]=filter(None, re.split("[: ]+", skewer_ver))[2]
        star_ver = subprocess.check_output("/mnt/software/STAR-dir/STAR-2.4.2a/STAR --version", stderr=subprocess.STDOUT, shell=True)
        softwares["STAR"] = star_ver.split("_")[1]
        rsem_ver = subprocess.check_output("/mnt/software/rsem-dir/rsem-1.2.22/rsem-calculate-expression -version", shell=True)
        softwares["RSEM"] = rsem_ver.split()[-1]

        version = robjects.r("""
        function (p) {
             paste(packageVersion(p),collapse=".")
        }""")
        softwares["R"] = list(version("base"))[0]
        softwares["EdgeR"] = list(version("edgeR"))[0]
        softwares["EBSeq"] = list(version("EBSeq"))[0]
        softwares["Pipeline"] = 'r20151008'

        softwares_df = pd.DataFrame(softwares, columns=["Software", "Version"])
        softwares_html = softwares_df.to_html(classes="brc", escape=False, index=False)
        with open(output) as f_out:
            f_out.write(softwares_html)


curdir = srcdir(".")
def report_input(wc):
    required_input = [ "trimmed_fq/trim_stat.html",
                       "report/QC_graphs/qc_table.html",
                       "alignments/alignment_stat.html",
                       "expression/exp_report.html",
                       "diff_expr/de_report.html",
                       "tmp/software_version.html" ]
    if "pathway_exe" in config:
        required_input.append("pathway/pathway_report.html")

    return required_input

rule report:
    input:  report_input
    output:
        html = "report.html",
        project = "report/project.html",
        css  = "report/CSS/report.css",
        png  = "report/workflow.png"
    log: "tmp/shell_log/report.log"
    params:
        mem="1G",
        report_dir="report"
    shell: """
        {curdir}/report.py {config_fn}
        cp {curdir}/workflow.png {output.png}
        cp -r {curdir}/CSS {params.report_dir}
        cp -r {curdir}/JS {params.report_dir}
        cp {curdir}/redirect.html {output.html}
        """

