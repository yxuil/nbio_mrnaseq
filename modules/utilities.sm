__author__ = "Xiaoyu Liu"
__email__ = "liux@nbio.info"
__copyright__ = "Copyright (C) 2016 Xiaoyu Liu"
__status__ = "development"
__license__ = "Public Domain"
__version__ = "0.2b"

import os, sys, json
from bokeh.models import ColumnDataSource
from bokeh.models.widgets import DataTable, TableColumn
from bokeh.embed import components
import bokeh
import pandas as pd

# ref_base = config.get('ref_base', "ref")

class bcolors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

#def get_ref(wc):
#    ref_base = config.get('ref_base', "")
#    ref_fa  = config.get("ref_fa" , "")
#    if ref_base != '':
#        return os.path.join(ref_base,"genome.fa")
#    else:
#        return ref_fa


# this two function to find out if a sample is paired end
def dif(a, b):
    diff_pos = [i for i in range(len(a)) if a[i] != b[i]]
    diff_a, diff_b = [ ], [ ]
    if diff_pos !=[ ]:
        diff_a = [a[i] for i in diff_pos]
        diff_b = [b[i] for i in diff_pos]
    return diff_pos, diff_a, diff_b
def isPairedReads(sample):
    '''determine if a sample has paired sequencing
    NOTE: if the sample has mixed single end and paired end sequencing
    it will treated as single end only
    '''

    R1s =  [ f for f in config['samples'][sample][0::2] ] # odd elements
    R2s =  [ f for f in config['samples'][sample][1::2] ] # even elements
    if len(R1s) != len(R2s): # number of R1 and R2 do not match
        # The sample {} has odd number of reads file. It is single end.
        return False
    for r1, r2 in zip(R1s, R2s):
        pos, a, b = dif(r1, r2)

        if len(pos) == 1 and \
            sorted([a[0], b[0]]) == ["1", "2"] and \
            not r1[pos[0] - 1 ].isdigit() and \
            not r2[pos[0] - 1 ].isdigit():
            # only one position is different
            # the difference is only 1 vs 2
            # !!! this oly accounts for L001_R1 vs L002_R1 and L001_R2
            pass
        else:
            #("The sample {} has un-matched reads file. It is single end.".format(sample))
            return False
    return  True

# functions to create slickgrid html table from tab delimited table

def table_to_html(table_fn, width = 980, height = 280):
    if type(table_fn) is str:
        table_fn = [table_fn]
    grid = []
    for fn in table_fn:
        data = pd.read_table(fn)
        data.index += 1
        data.columns=["ID"] + list( data.columns[1:])
        if len(data) == 0: # empty table
            source = ColumnDataSource(data)
        else:
            source = ColumnDataSource(data.applymap(lambda x: round(float(x), 2) if str(x).lstrip('-').replace('.','',1).isdigit() else x))
        columns = [ TableColumn(field= a, title= a) for a in data.columns ]
        if width == 980: # default
            width = max(width, 100 * len(columns)) # make sure the column width is wide enough
        data_table = DataTable(source=source, columns=columns, width=width, height=height, row_headers=False)
        grid.append(data_table)
    script, divs = components(grid, None)
    return(script, divs)

rule index_aln_bam:
    input: "alignments/{sample}_aligned_{nome}.bam"
    output: "alignments/{sample}_aligned_{nome, genome|transcriptome}.bam.bai"
    log: "tmp/shell_log/index_{sample}_{nome}_bam.log"
    params:
        mem="2G"
    message: "#    indexing bam file {input}"
    shell: "{SAMTOOLS} index {input}"
