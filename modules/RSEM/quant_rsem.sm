'''
This is a quant module, which takes a transcript-aligned BAM file (rsem_bam rule) to produce individual
expression file (temporary); and individual expression are aggregated to feature read count file (rule
make_exp_matrix)

input: alignments/sample_aligned_transcriptome.bam    <- sample is enumerated through those defined in config
output: expression/{exp}_vs_{ctrl}.{feature, genes|isoforms}.readcounts.txt
'''

RSEM_IDX_FILES = ["genome.{i}.ebwt".format(i=i) for i in range(1,5)] + ["genome.rev.{i}.ebwt".format(i=i) for i in [1,2]]
RSEM_IDX = [os.path.join(ref_base, "RSEMIndex", fn) for fn in RSEM_IDX_FILES]
RSEM_IDX_DIR = os.path.join(ref_base, "RSEMIndex")
# point RSEM_IDX to project folder if star reference is incomplete
for fn in RSEM_IDX:
    if not os.path.isfile(fn):
        RSEM_IDX = [os.path.join("ref", "RSEMIndex", fn) for fn in RSEM_IDX_FILES]
        RSEM_IDX_DIR = os.path.join("ref", "RSEMIndex")
        break

##### INDEX #####


def clean_GTF(gtf_fn, output_fn):
    valid_gtf_records = {}
    trx_id_lst = []
    dup_gtf_records = {}

    with open(gtf_fn, 'r') as gtf_in:
        for line in gtf_in:
            fields = line.strip().split('\t')

            if len(fields[0]) > 5: continue # skip non 'chrXX' lines
            trx_id = fields[-1].split(";")[1].split('"')[1] # gene_id "NM_032291"; transcript_id "NM_032291";
            if trx_id not in valid_gtf_records: # make a new trx entry if it is not exist yet
                valid_gtf_records[trx_id] = {'transcript_id': trx_id,
                                             'chr': fields[0],
                                             'strand': fields[6],
                                             'GTF': []}
                trx_id_lst.append(trx_id) # for late use to keep the GTF records in the same order

            if valid_gtf_records[trx_id]['chr'] != fields[0] or valid_gtf_records[trx_id]['strand'] != fields[6]:
                # same trx_id on other chromosome
                if trx_id not in dup_gtf_records:
                    dup_gtf_records[trx_id] = {'transcript_id': trx_id,
                                             'chr': fields[0],
                                             'strand': fields[6],
                                             'GTF': []}
                dup_gtf_records[trx_id]['GTF'].append(line)
            else:
                valid_gtf_records[trx_id]['GTF'].append(line)

    with open(output_fn, 'w') as gtf_out:
        for trx_id in trx_id_lst:
            gtf_out.writelines(valid_gtf_records[trx_id]['GTF'])
    with open("tmp/dup.gtf", 'w') as dup_out:
        for trx_id in trx_id_lst:
            if trx_id in dup_gtf_records:
                dup_out.writelines(dup_gtf_records[trx_id]['GTF'])

#rule fix_gtf:
#    input: ref_gtf #os.path.join(ref_base, "annotation", "genes.gtf")
#    output: "tmp/genes_cleaned.gtf"
#    log: "shell_logs/reference_fix_gtf.log"
#    params:
#        mem="1G"
#    run: clean_GTF(input[0], output[0])

#
# rule link_ref:
#     input: ref_dir + "./genome.fa"
#     output: ref_dir + "./RSEMIndex/genome.fa"
#     shell: "ln -sf {input} {output}\n touch {output}"

rule rsem_index:
    input:
        fa = ref_fa, #os.path.join(ref_base, "genome.fa"),
        gtf= ref_gtf #"tmp/genes_cleaned.gtf"
    output: RSEM_IDX
    log: "tmp/shell_log/reference_index.log"
    params:
        mem = "2G",
        ref = os.path.join(RSEM_IDX_DIR, "genome")
    message: """\n##### Make RSEM index with reference sequence and gene annotation
    # rule: rsem_index
    # INPUT:   {input}
    # OUTPUT:  {output}
    # PROGRAM: rsem-prepare-reference
    """
    shell:
        #clean_GTF(input.gtf, 'gene_cleaned.gtf')
        "{RSEM}/rsem-prepare-reference --gtf {input.gtf} --bowtie --bowtie-path {BOWTIE} {input.fa} {params.ref};"
        #"ln -s {input.fa} {ref_base}/RSEMIndex/genome.fa"

ruleorder: rsem_bam > rsem_fastq
rule rsem_bam:
    input:
        ref = RSEM_IDX,
        bam  = "alignments/{sample}_aligned_transcriptome.bam"
    output:"tmp/rsem_estimate/{sample}.genes.results",
           "tmp/rsem_estimate/{sample}.isoforms.results"
    log: "tmp/shell_log/rsem_estimate_{sample}.log"
    threads: 8
    params:
        mem = "10G",
        ref= ref_base + "/RSEMIndex/genome",
        prefix= "tmp/rsem_estimate/{sample}",
        pair_option=lambda wildcards: "--paired-end" if isPairedReads(wildcards.sample) else ""
    # message: """\n##### RSEM estimates expression from sample {wildcards.sample} aligned BAM file
    # # rule: rsem_bam
    # # INPUT:   {input}
    # # OUTPUT:  {output}
    # # PROGRAM: rsem-calculate-expression
    # """
    shell: """
            {RSEM}/rsem-calculate-expression {params.pair_option} --bam {input.bam} -p {threads} {params.ref} {params.prefix} #$logging
            """

rule rsem_exp_matrix:
    input: lambda wc: ["expression/{s}_{f}_table.txt".format(s=sample, f=wc.feature) for sample in \
                       config["treatments"][wc.exp] + config["treatments"][wc.ctrl] ]
    output: "expression/{exp}_vs_{ctrl}.{feature, [a-zA-Z]+}.readcounts.txt"
    log: "tmp/shell_log/{exp}_vs_{ctrl}.{feature}_cntMat.log"
    params:
        mem = "1G",
        header_str = lambda wildcards: "\t".join([""] + config["treatments"][wildcards.exp] + config["treatments"][wildcards.ctrl])
    message: """\n##### Merging reads count for {wildcards.exp}_vs_{wildcards.ctrl}.{wildcards.feature} data matrix
    # rule: rsem_exp_matrix
    # INPUT:   {input}
    # OUTPUT:  {output}
    # PROGRAM: rsem-generate-data-matrix
    """
    shell: """
             {RSEM}/rsem-generate-data-matrix {input} > {output}
             sed -i '1s/.*/{params.header_str}/' {output}
             """

rule mv_expression:
    input: "tmp/rsem_estimate/{sample}.genes.results",
           "tmp/rsem_estimate/{sample}.isoforms.results"
    output: "expression/{sample}_genes_table.txt",
            "expression/{sample}_isoforms_table.txt"
    log: "tmp/shell_log/rsem_estimate_{sample}.log"
    params:
        mem = "1G"
    message: """\n##### move expression estimation to destination
    # rule: mv_expression
    # INPUT:   {input}
    # OUTPUT:  {output}
    # PROGRAM: mv
    """
    shell:    "mv {input[0]}  {output[0]}; "
              "mv {input[1]}  {output[1]}"




rsem_write_exp = srcdir("quant_rsem_write_expTable.py")
rule expression_table:
    input: lambda wc: [ "expression/{sample}_{feature}_table.txt".format(sample=s, feature=wc.feature) for s in SAMPLES ]
    output: "expression/{feature}_count_table.txt",
            "expression/{feature}_TPM_table.txt",
            "expression/{feature}_FPKM_table.txt"
    log: "tmp/shell_log/merge_rsem_{feature}_expression.log"
    message: """\n##### merge all sample {wildcards.feature} expression to count, TPM, and FPKM tables
    # rule: expression_table
    # INPUT:   {input}
    # OUTPUT:  {output}
    # PROGRAM: quant_rsem_write_expTable.py
    """
    params:
        mem = "1G"
    shell: """
        {rsem_write_exp} {config_fn} {wildcards.feature}
        """

rule report_rsem_expression:
    input: expand("expression/{feature}_{measure}_table.txt", feature = config["features"], measure = ["FPKM", "TPM", "count"])
    output: "expression/exp_report.html"
    log: "tmp/shell_log/exp_report.log"
    # message: "#   merge all sample {wildcards.feature} expression to {output}"
    params:
        mem = "1G"
    run:
        import pandas as pd
        from jinja2 import Template
        labels = list(map(lambda x: " ".join(x.split("/")[1].split("_")[:2]), input))
        grid_js, gt_divs = table_to_html(list(input))

        html_template = Template("""
        <div id = "container">
            {% for lbl in labels %}
            <input id="tab-{{ loop.index }}" type="radio" name="tab-group"{% if loop.index == 1 %} checked="checked"{% endif %}>
            <label for="tab-{{ loop.index }}">{{ lbl }}</label>
            {% endfor %}

            {% for gt_tbl in gt_divs %}
            <div class="genetable" id="content-{{ loop.index }}">
                {{ gt_tbl[21:-7] }}
            </div>
            {% endfor %}
        </div>

        <link rel="stylesheet" href="http://cdn.pydata.org/bokeh/release/bokeh-0.9.2.min.css" type="text/css" />
        <script type="text/javascript" src="http://cdn.pydata.org/bokeh/release/bokeh-0.9.2.min.js"></script>
        {{ grid_js }}
        """)
        # make the first table checked
        checked =[' checked="checked"'] + ['']*(len(gt_divs)-1)
        html_str = html_template.render(labels=labels, gt_divs = gt_divs, grid_js=grid_js)
        with open(str(output), 'w') as f_out:
            f_out.write(html_str)


#--bam [--paired-end] input reference_name sample_name

rule rsem_fastq:
    input:
        ref = RSEM_IDX,
        r1 = lambda wc: [ "trimmed_fq/{}-R1.fq.gz".format(wc.sample)]
    output: "rsem_estimate/{sample}.genes.results",
            "rsem_estimate/{sample}.isoforms.results",
            "rsem_estimate/{sample}.transcript.sorted.bam",
            "rsem_estimate/{sample}.genome.sorted.bam"
    threads: 8
    log: "tmp/shell_log/rsem_calc_expr_{wc.sample}.log"
    params:
        mem = "8G",
        ref= ref_base + "./RSEMIndex/genome"
    message: """\n##### Estimate expression from sample {wildcards.sample} RNAseq raw reads
    # rule: rsem_fastq
    # INPUT:   {input}
    # OUTPUT:  {output}
    # PROGRAM: rsem-calculate-expression
    """
    run:
        read1_lst = ",".join(input.r1)
        pair_option, read2_lst = ("--paired-end", ",".join(input.r1).replace("R1", "R2") ) \
                                  if isPairedReads(wildcards.sample) else ("", "")
        shell("{RSEM}/rsem-calculate-expression -p {threads} --output-genome-bam --bowtie-path {BOWTIE} "\
              "{pair_option} {read1_lst} {read2_lst} {params.ref} rsem_estimate/{wildcards.sample};"
              " mv ")

