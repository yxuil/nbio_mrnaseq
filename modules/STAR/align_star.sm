
read_length=100 # TODO add parameter in the config, then use int(config["read_length"]) - 1

STAR_IDX_FILES = "chrLength.txt chrNameLength.txt chrName.txt chrStart.txt Genome genomeParameters.txt SA SAindex".split()
STAR_IDX_DIR   = os.path.join(ref_base, "STARIndex")
STAR_IDX = [os.path.join(ref_base, "STARIndex", fn) for fn in STAR_IDX_FILES]

# point STAR_IDX to project folder if star reference is incomplete
#for fn in STAR_IDX_FILES:
#    if not os.path.isfile(os.path.join(fn)):
#        STAR_IDX = [os.path.join("STARIndex", fn) for fn in STAR_IDX_FILES]
#        STAR_IDX_DIR = os.path.join("STARIndex")
#        break 

rule star_index:
    input:
        fa = ref_fa,
        gtf= ref_gtf 
    output: STAR_IDX
    log: "tmp/pipeline_log/star_index.log"
    params:
        mem="34G", 
        log="tmp/shell_log/star_index_Log.out"
    threads: 8
    message: """\n##### Create STAR reference genome index with known gene annotation
    # rule: star_index
    # INPUT:   {input}
    # OUTPUT:  {output}
    # PROGRAM: STAR genomeGenerate
    """
    shell: """
    {STAR} --runThreadN {threads} --runMode genomeGenerate --genomeDir {STAR_IDX_DIR} --genomeFastaFiles {input.fa} --sjdbGTFfile {input.gtf} --sjdbOverhang {read_length}
    mv Log.out {params.log}
    """

rule star_align_pass1:
    input:
        ref = STAR_IDX,
        reads = lambda wc: ["trimmed_fq/{}_R1.fq.gz".format(wc.sample), "trimmed_fq/{}_R2.fq.gz".format(wc.sample)] \
                                if isPairedReads(wc.sample) else "trimmed_fq/{}.fq.gz".format(wc.sample)
    output:
        junction = "tmp/star_alignment_pass1/{sample}_SJ.out.tab"
    params:
        mem = "32G", # for SGE submission option: -l vf={params.mem}
        o_prefix = "tmp/star_alignment_pass1/{sample}_",
        reads_lst = lambda wc: "trimmed_fq/{s}_R1.fq.gz trimmed_fq/{s}_R2.fq.gz".format(s = wc.sample) if isPairedReads(wc.sample) else "trimmed_fq/{}.fq.gz".format(wc.sample)
    log: "tmp/shell_log/star_align_{sample}.log"
    threads: 8

    message: """\n##### Align PASS1 - align sample {wildcards.sample} to reference genome to generate novel junction list
    # rule: star_align_pass1
    # INPUT:   {input}
    # OUTPUT:  {output}
    # PROGRAM: STAR
    """

    shell:"""
        {STAR} --runThreadN {threads} --genomeDir {STAR_IDX_DIR} --readFilesIn {params.reads_lst}  \
            --readFilesCommand zcat --outFileNamePrefix {params.o_prefix} --outSAMattributes NH HI AS NM MD XS \
            --outFilterMultimapNmax 50 #$logging
        """

star_junc_merge= srcdir("star_junc_merge.py")
rule merge_star_junction:
    input: expand("tmp/star_alignment_pass1/{s}_SJ.out.tab", s=SAMPLES)
    output: "tmp/star_alignment_pass1/master_SJ.out.tab"
    params:
        mem = "2G"
    log: "tmp/shell_log/star_junc_merge.log"
    message: """\n##### merge output junction files from individual STAR alignment
    # rule: merge_star_junction
    # INPUT:   {input}
    # OUTPUT:  {output}
    # PROGRAM: star_junc_merge.py
    """
    threads: 1
    shell: "{star_junc_merge} {input} > {output}"

rule star_align_pass2:
    input:
        ref = STAR_IDX,
        reads = lambda wc: ["trimmed_fq/{}_R1.fq.gz".format(wc.sample), "trimmed_fq/{}_R2.fq.gz".format(wc.sample)] if isPairedReads(wc.sample) else "trimmed_fq/{}.fq.gz".format(wc.sample),
        junc_file = rules.merge_star_junction.output
    output:
        genome_alignment="tmp/star_alignment_pass2/{sample}_Aligned.sortedByCoord.out.bam",
        transcriptome_alignment = "tmp/star_alignment_pass2/{sample}_Aligned.toTranscriptome.out.bam",
        reads_count="tmp/star_alignment_pass2/{sample}_ReadsPerGene.out.tab",
        log="tmp/pipeline_log/star_align_{sample}.final.log"
    params:
        mem = "32G", # for SGE submission option: -l vf={params.mem}
        o_prefix = "tmp/star_alignment_pass2/{sample}_",
        reads_lst = lambda wc: "trimmed_fq/{s}_R1.fq.gz trimmed_fq/{s}_R2.fq.gz".format(s = wc.sample) if isPairedReads(wc.sample) else "trimmed_fq/{}.fq.gz".format(wc.sample)
    log: "tmp/shell_log/star_align_{sample}.log"
    threads: 8

    message: """\n#####  STAR pass2 align sample {wildcards.sample} to reference genome with newly found multi-sample junctions
    # rule: star_align_pass2
    # INPUT:   {input}
    # OUTPUT:  {output}
    # PROGRAM: STAR --quantMode TranscriptomeSAM GeneCounts
    """

    shell:"""
        # if [ -z "$SGE_O_WORKDIR" ]; then
        #     logging="2>&1 | tee {log}" # shell logging
        # else
        #     logging=""  # SGE logging
        # fi
        {STAR} --runThreadN {threads} --genomeDir {STAR_IDX_DIR} --sjdbFileChrStartEnd {input.junc_file} \
            --readFilesIn {params.reads_lst}  \
            --readFilesCommand zcat --outFileNamePrefix {params.o_prefix} --outSAMattributes NH HI AS NM MD XS \
            --outSAMunmapped Within --outSAMtype BAM SortedByCoordinate --quantMode TranscriptomeSAM GeneCounts \
            --outFilterMultimapNmax 50 #$logging
        mv {params.o_prefix}Log.final.out {output.log}
        """

rule mv_alignment:
    input:  "tmp/star_alignment_pass2/{sample}_Aligned.sortedByCoord.out.bam",
            "tmp/star_alignment_pass2/{sample}_Aligned.toTranscriptome.out.bam"
    output: "alignments/{sample}_aligned_genome.bam",
            "alignments/{sample}_aligned_transcriptome.bam"
    log: "tmp/shell_log/star_align_{sample}.log"
    params:
        mem = "2G"
    message: """\n#####  Move alignment files to destination
    # rule: mv_alignment
    # INPUT:   {input}
    # OUTPUT:  {output}
    # PROGRAM: mv
    """
    shell:  "mv  {input[0]} {output[0]};"
            "mv  {input[1]} {output[1]}"

rule star_readcount:
    input: lambda wc: ["tmp/star_alignment_pass2/{s}_ReadsPerGene.out.tab".format(s=sample) for sample in config["treatments"][wc.exp] + config["treatments"][wc.ctrl]]
    output: "expression/{exp}_vs_{ctrl}.gene.readcount.txt"
    log: "tmp/shell_log/{exp}_vs_{ctrl}.gene.readcount.star.log"
    params:
        mem = "4G"
    message: """\n#####  merge STAR's ReadsPerGene table to expression folder
    # rule: star_readcount
    # INPUT:   {input}
    # OUTPUT:  {output}
    # PROGRAM: pandas
    """
    run:
        import pandas as pd
        table_out = pd.DataFrame()
        for fn in input:
            sample_name = os.path.basename(fn).replace("_ReadsPerGene.out.tab", "")
            table_in = pd.read_table(fn, index_col=0, header = None, skiprows=skip)

            table_out[sample_name] = table_in[1]
        table_out.index.name = "gene"
        table_out.to_csv(output, sep = '\t')


star_report = srcdir("align_star_report.py")
rule alignment_stat:
    input: expand("alignments/{sample}_aligned_genome.bam", sample=SAMPLES),
           expand("tmp/pipeline_log/star_align_{sample}.final.log", sample=SAMPLES)
    output: "alignments/alignment_stat.html"
    params: mem='1G', o_prefix="alignments/alignment_stat"
    log: "tmp/shell_log/trim_report.log"
    message: """\n#####  report STAR alignment stat
    # rule: alignment_stat
    # INPUT:   {input}
    # OUTPUT:  {output}
    # PROGRAM: align_star_report.py
    """
    shell: """
        {star_report} {config_fn} {params.o_prefix}
        """



# use this rule when only alignments are needed
rule alignment:
    input: expand("alignments/{sample}_aligned_genome.bam", sample=SAMPLES)
    message: """\n##### Run the alignment for all samples
    # rule: alignment
    # INPUT:   {input}
    # OUTPUT:  {output}
    # PROGRAM:
    """
