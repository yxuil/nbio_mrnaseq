'''
Please see the example run_config.json file for configuration file format
'''

import sys, os, shutil, json

config_fn="run_config.json"
configfile:
    config_fn

workdir:
    config["workdir"]

# create path for SGE output, temporary path etc.
for d in ["pipeline_log", 'shell_log', 'rseqc']:
    os.makedirs(os.path.join("tmp", d), exist_ok=True)

##### CONFIG #####
# make none duplicate sample list that maintains the treatment grouping of samples
duplicates=set()
SAMPLES = [ s for trt in sorted(config["treatments"].keys()) for s in config["treatments"][trt] \
              if not (s in duplicates or duplicates.add(s))]
w_dir =  config["workdir"]
delivery = config.get("delivery", os.path.join(config["workdir"], "delivery"))
data_dir = config["data_dir"]

# when there is only one comparison specified, extra step to make it into a one item list
if type(config["comparisons"]) is str:
    config["comparisons"] = [config["comparisons"]]

# remove the spaces in the comparisons' keys
def remove_spaces(s):
    items = map(lambda x: x.strip(), s.split(":"))
    return ":".join(items)
config["comparisons"] = list(map(remove_spaces, config["comparisons"]))

# matched_pair list of exp and ctrl treatments
expGrp_lst =  [ str.strip(comp.split(":")[0]) for comp in config["comparisons"]]
ctrlGrp_lst = [ str.strip(comp.split(":")[1]) for comp in config["comparisons"]]

# samples pairing setup. default as not-paired
if "matched_pair" not in config:
    config["matched_pair"] = [False] * len(config["comparisons"])
elif type(config["matched_pair"]) is str:
    config["matched_pair"] = [config["matched_pair"]]
# if not all comparisons have matched_pair defined
d =len(config['comparisons']) -  len(config['matched_pair'])
if d > 0:
    # defaults are False
    config['matched_pair'] += [False] * d
# Allow case insensetive true/yes to be True
for i, v in enumerate(config['matched_pair']):
    if (type(v) is str):
        if (v.lower() in ['yes', 'true']):
            config['matched_pair'][i]= True
        else:
            config['matched_pair'][i]= False


matched_pair = dict(zip(config['comparisons'], config['matched_pair'])) # dict of boolean values for exp:ctrl pairs. used in the edegr module
#for num, (exp, ctrl) in enumerate(zip(expGrp_lst, ctrlGrp_lst)):
#        # default paired setting is false
#        paired["{}:{}".format(exp, ctrl)] = False
#        if num >= len(config["paired"]):
#            print('\n{}[ERROR] config: not all comparison has paired information. Use default (not paired).\n'.format(bcolors.FAIL, bcolors.ENDC))
#        elif config["paired"][num].lower() in ['yes', 'true']:
#            paired["{}:{}".format(exp, ctrl)] = True


# HACK is replaced with new function ## to get current Snakefile directory #os.path.abspath(sys.path[0])
_pipeline_dir = srcdir('.')

# features to be compared. default to test "gene" and "isoform"
config["features"] = config.get("features", ["gene", "isoform"])
# make one item list if only one feature is specified
if type(config["features"]) is str: config["features"] = [config["features"]]
# convert "Genes", "genes", "GENE" and such to 'gene'; same for 'isoform'
config["features"] = list(map(lambda x: x.lower().rstrip('s'), config["features"]))

#### set up reference folder ####
ref_base = config.get('ref_base', "tmp/ref/")
ref_fa  = config.get('ref_fa', os.path.join(ref_base, 'genome.fa'))
ref_gtf = config.get("ref_gtf", os.path.join(ref_base, "annotation", "genes.gtf"))

# include software/program information
include:
    "config/toolsinfo"

include:
    "modules/utilities.sm"

include:
    "modules/preprocess/trim.sm"

include:
    "modules/RSeQC/RSeQC.sm"

include:
    "modules/report/report.sm"

# Aligner module:

if config["align_exe"] == "STAR":
    include: "modules/STAR/align_star.sm"
elif config['align_exe'] == "RSEM":
    # include: "format_rsem_results.py"
    include: "modules/RSEM/quant_rsem.sm"
else:
    print("\n{}[ERROR] config: ALIGN_exe needs to be one of STAR, RSEM, or BWA{}\n".format(bcolors.FAIL, bcolors.ENDC))

# Quantification module:

if config["quant_exe"].upper() == "RSEM" and config["align_exe"].upper() != "RSEM":
    include: "modules/RSEM/quant_rsem.sm"
elif config["quant_exe"].lower() == "featurecounts":
    include: "modules/quant_featurecounts.sm"
elif config["quant_exe"].lower() == "star":
    if len(config["features"]) > 1 or "gene" not in config["features"]:
        print('\n{}[ERROR] config: STAR only provide read count per gene. Some features in the "feature list" are not applicable{}\n'.format(bcolors.FAIL, bcolors.ENDC))
        config["features"] = ["gene"]
    if config["align_exe"].upper() != "STAR": # otherwise align_star.sm has already included
        include: "modules/STAR/align_star.sm"
else:
    print("\n{}[ERROR] config: QUANT_exe needs to be one of RSEM, STAR, or featureCounts{}\n".format(bcolors.FAIL, bcolors.ENDC))

# Differential expression module
if config["de_exe"].upper() == "EDGER":
    include: "modules/EdgeR/DE_analysis_edger.sm"
elif config["de_exe"].upper() == "EBSEQ":
    include: "modules/EBseq/DE_analysis_ebseq.sm"
else:
    print("\n{}[ERROR] config: DE_exe needs to be one of EBseq or EdgeR{}\n".format(bcolors.FAIL, bcolors.ENDC))

# Pathway analysis
if "pathway_exe" in config:
    if config["pathway_exe"].upper() == "GOSEQ":
        include: "modules/goseq/goseq.sm"
##### target #####
# run all the rules by default
rule all:
    input: ["diff_expr/{}_vs_{}.{}.{}.txt".format(exp,ctrl,feature, table)  \
                    for exp, ctrl in zip(expGrp_lst, ctrlGrp_lst) \
                    for feature in config["features"] \
                    for table in ['diffexpr', 'onlyDE']]

    params: mem='1G'
    log: "tmp/shell_log/analysis_done.log"

# use all conditions in one conparison
rule one_compare: 
    input: ["diff_expr/all.{}_DE_table.txt".format(feature) for feature in ['gene','isoform'] ]
    # input: "expression/all.gene.readcounts.txt","expression/all.isoform.readcounts.txt"

##### deliver #####
# This rule create a deliverable file that can be sent to client
# currently the output is a tar gz file with prefix specified by "deliverable" in config file
# it can only run after report.html file is created

rule deliverable:
    input: "report.html", "expression/expression.xlsx", "diff_expr/differential_expression.xlsx"
    output: "mRNAseq_Analysis.zip"
    log: "tmp/pipeline_log/make_deliverable.log"
    params:
        mem="4G",
        directory = "mRNAseq_Analysis"
    shell: """
        mkdir -p {params.directory}/report
        mkdir -p {params.directory}/alignment
        # link all delivery files except alignments/*_aligned_genome.*. alingment will be moved by deliver.sh
        for fn in report/* report.html; do
            if [[ -d $fn ]]; then
                for fnn in $fn/*; do
                    # make directory for archiving
                    [[ -d {params.directory}/$fn ]] || mkdir -p {params.directory}/$fn
                    ln -s `readlink -e $fnn` {params.directory}/$fnn
                done
            else
                ln -s `readlink -e $fn` {params.directory}/$fn
            fi
        done

        ln -s `readlink -e expression/expression.xlsx` {params.directory}/expression.xlsx
        ln -s `readlink -e diff_expr/differential_expression.xlsx` {params.directory}/differential_expression.xlsx

        # compress the folder
        zip -r {output} {params.directory}
        rm -rf {params.directory}

    """

#rule deliver:
#    input: rules.deliverable.output
#    params:
#        dest = config["delivery"]
#    shell:"""
#        if [[ ${params.dest} == *.tar.gz ]]  # delivery is a file
#        then
#            dest_dir=`dirname {params.dest}`
#            dest_file=`basename {params.dest}`
#        else
#            dest_dir={params.dest}
#            dest_file="mRNAseq_Analysis.tar.gz"
#        fi
#
#        [ ! -d $dest_dir ] && mkdir -p $dest_dir
#        mv {input} $dest_dir/$dest_file
#
#        [ ! -d $dest_dir/alignments ] && mkdir -p $dest_dir/alignments
#        for fn in alignments/*_aligned_genome.*; do
#            echo "moving file: $fn ..."
#            mv $fn $dest_dir/alignments  # move the file to the delivery folder
#            echo "file - $fn - has been moved. Save a symbolic link"
#            ln -s $dest_dir/alignments/`basename $fn` $fn      # make a symbolic link in the original place
#        done
#
#        # Change file permission"
#        chgrp -R "BIOTECH\\brcdownloaders" $dest_dir  # update the group to allow user download previllege
#
#    """

##### remove #####
rule remove:
    shell: "rm -r rsem_estimate/ trimmed_fq/ DE_gene.txt gene_reads_counts.matrix *snakejob*"

vars = {k:v for k, v in globals().items() if "_VERSION" in k}
for k, v in (vars.items()):
    print(k.replace("_VERSION", "\t"), v)
