'''
Please see the example run_config.json file for configuration file format
'''

import sys, os, shutil, json

cfg_fn = "run_config.json"

configfile:
    cfg_fn

workdir:
    config["workdir"]

# create path for SGE output, temporary path etc.
for d in ["logs", 'tmp', 'shell_logs', 'tmp/rseqc']:
    os.makedirs(d, exist_ok=True)

##### CONFIG #####
# make none duplicate sample list that maintains the treatment grouping of samples
duplicates=set()
SAMPLES = [ s for trt in sorted(config["treatments"].keys()) for s in config["treatments"][trt] \
              if not (s in duplicates or duplicates.add(s))]
w_dir =  config["workdir"]
delivery = config.get("delivery", config["workdir"] + "./delivery/")
data_dir = config["data_dir"]

expGrp_lst =  [ str.strip(comp.split("-")[0]) for comp in config["comparisons"]]
ctrlGrp_lst = [ str.strip(comp.split("-")[1]) for comp in config["comparisons"]]

# HACK: to get current Snakefile directory
_pipeline_dir = os.path.abspath(sys.path[0])

#### set up reference folder ####
ref_base = config.get('ref_base', "ref/")

if not os.path.isdir(ref_base): # no ref dir defined, use current work_dir/ref
    ref_base = "ref/"
    config["ref_base"] = ref_base

ref_fa  = config.get('ref_fa', os.path.join(ref_base, 'genome.fa'))
ref_gtf = config.get("ref_gtf", os.path.join(ref_base, "annotation", "genes.gtf"))
print(ref_base,ref_fa, ref_gtf)
# include software/program information
include: 
    "toolsinfo"


##### test rule ####
# rule test_rsem:
#     input: ["expression/{}_vs_{}.{}.counts.matrix".format(exp,ctrl,feature) for exp, ctrl in zip(expGrp_lst, ctrlGrp_lst) \
#             for feature in ['genes','isoforms'] ]

##### target #####
# run all the rules by default
rule all:
    input: ["diff_expr/{}_vs_{}.{}_{}table.txt".format(exp,ctrl,feature, de)  \
                    for exp, ctrl in zip(expGrp_lst, ctrlGrp_lst) \
                    for feature in ['genes','isoforms'] \
                    for de in ['', 'DE_']] ,
            expand("expression/{f}_{m}_table.txt", f=["genes","isoforms"], m=["count", "TPM", "FPKM"])
    params: mem='1G'
    log: "shell_logs/analysis_done.log"

rule report:
    input: "trimmed_fq/trim_stat.html", "QC_graphs/qc_table.html", "alignments/alignment_stat.html", "diff_expr/de_report.html"
    output: "report.html"
    log: "shell_logs/reort.log"
    params: mem="1G"
    shell: """
        {_pipeline_dir}/report.py {cfg_fn}
        """
# include:
#     'DE_analysis_ebseq.sm'

include:
    'quant_rsem.sm'

include:
    "trim.sm"

include:
    "RSeQC.sm"

include:
    "utilities.sm"

# aligner. STAR or RSEM
include: "prepare_reference.sm"

include: 
	"align_star.sm"
include: 
	"DE_analysis_ebseq.sm"
#if config["align_exe"] == "STAR":
#    include: "align_star.sm"
#elif config['align_exe'] == "RSEM":
#    include:
#        "",
#        "format_rsem_results.py"

# program for differential expression analysis
if config["DE_exe"] == "EDGER":
    include: "DE_analysis_edger.sm"

elif config["DE_exe"] == "EBSEQ":
    include: "DE_analysis_ebseq.sm"

# use all conditions in one conparison
rule one_compare: 
    input: ["diff_expr/all.{}_DE_table.txt".format(feature) for feature in ['genes','isoforms'] ]
    # input: "expression/all.genes.counts.matrix","expression/all.isoforms.counts.matrix"

##### deliver #####
rule deliver:
    input: "report.html"
             # ["diff_expr/{}_vs_{}.{}_{}table.txt".format(exp,ctrl,feature, de)  \
#             for exp, ctrl in zip(expGrp_lst, ctrlGrp_lst) \
#             for feature in ['genes','isoforms'] ] \
#             for de in ['', 'DE_']
    output: "mRNAseq_analysis.tar.gz"
            # ["{}/diff_expr/{}_vs_{}.{}_{}table.txt".format(delivery, exp,ctrl,feature, de)  \
            # for exp, ctrl in zip(expGrp_lst, ctrlGrp_lst) \
            # for feature in ['genes','isoforms'] ] \
            # for de in ['', 'DE_']
    params:
        o_dir = "mRNAseq_analysis"
    log: "shell_logs/delivery.log"
    message:
        "#  Copy / move results to delivery folder"
    shell:
        """
        mkdir -p {params.o_dir}/alignments {params.o_dir}/expression {params.o_dir}/diff_expr {params.o_dir}/QC_graphs
        # link all delivery files except alignments/*_aligned_genome.*, which will be moved by deliver.sh
        for fn in expression/*_table.txt diff_expr/*_table.txt QC_graphs/*.png; do
            ln -s `readlink -e $fn` {params.o_dir}/$fn
        done
        ln -s `readlink -e {_pipeline_dir}/workflow.png` {params.o_dir}/workflow.png
        tar -hczf {params.o_dir}.tar.gz {params.o_dir}/
        """


##### remove #####
rule remove:
    shell: "rm -r rsem_estimate/ trimmed_fq/ DE_gene.txt gene_reads_counts.matrix *snakejob*"

