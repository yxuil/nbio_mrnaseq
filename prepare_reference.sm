#### STAR prepare reference ####
import os
def get_ref(wc):
    ref_base = config.get('ref_base', "")
    ref_fa  = config.get("ref_fa" , "")
    if ref_base != '':
        return os.path.join(ref_base,"genome.fa")
    else:
        return ref_fa

ref_base = config.get('ref_base', "")

rule link_ref:
    input: ""
    output:
        fa = os.path.join(config.get('ref_base', "ref"), "genome.fa"),
        gtf= os.path.join(config.get('ref_base', "ref"), "annotation", "genes.gtf")
    log: "logs/reference_index.log"
    message:"""
        ##
        #  Set up reference directory
        ##
    """
    run:
        ref_gtf = config.get("ref_gtf", "")
        ref_fa  = config.get("ref_fa" , "")
        print("ref_base",ref_base)
        print("ref_gtf",ref_gtf)
        print("ref_fa",ref_fa)

        if not os.path.isfile(output.fa): # genome.fa does not exist in default location
            if os.path.isfile(ref_fa):
                shell("cp {ref_fa} {output.fa}")
            else:
                print("No suitable reference fasta file")

        if not os.path.isfile(output.gtf): # annotation does not exist in defualt location
            if os.path.isfile((ref_gtf)):
                shell("cp {ref_gtf} {output.gtf}")
            else:
                print("No suitable annotation GTF file")


rule star_index:
    input:
        fa = os.path.join(ref_base, "genome.fa"),
        gtf= os.path.join(ref_base, "annotation", "genes.gtf")
    output: os.path.join(ref_base, "STARIndex/{}").format(f) for f in "chrLength.txt chrNameLength.txt chrName.txt chrStart.txt Genome genomeParameters.txt SA SAindex".split()
    log: "logs/reference_index.log"
    params:
        mem="30G",
        index_dir = os.path.join(ref_base, "STARIndex")
    threads: 8
    message:"""
        ##
        #  Create STAR reference genome index
        ##
    """
    shell: " {STAR} --runThreadN {threads} --runMode genomeGenerate --genomeDir {params.index_dir} " \
           "--genomeFastaFiles {input.fa} --sjdbGTFfile {input.gtf} --sjdbOverhang 99"

##### INDEX #####


def clean_GTF(gtf_fn, output_fn):
    valid_gtf_records = {}
    trx_id_lst = []
    dup_gtf_records = {}

    with open(gtf_fn, 'r') as gtf_in:
        for line in gtf_in:
            fields = line.strip().split('\t')

            if len(fields[0]) > 5: continue # skip non 'chrXX' lines
            trx_id = fields[-1].split(";")[1].split('"')[1] # gene_id "NM_032291"; transcript_id "NM_032291";
            if trx_id not in valid_gtf_records: # make a new trx entry if it is not exist yet
                valid_gtf_records[trx_id] = {'transcript_id': trx_id,
                                             'chr': fields[0],
                                             'strand': fields[6],
                                             'GTF': []}
                trx_id_lst.append(trx_id) # for late use to keep the GTF records in the same order

            if valid_gtf_records[trx_id]['chr'] != fields[0] or valid_gtf_records[trx_id]['strand'] != fields[6]:
                # same trx_id on other chromosome
                if trx_id not in dup_gtf_records:
                    dup_gtf_records[trx_id] = {'transcript_id': trx_id,
                                             'chr': fields[0],
                                             'strand': fields[6],
                                             'GTF': []}
                dup_gtf_records[trx_id]['GTF'].append(line)
            else:
                valid_gtf_records[trx_id]['GTF'].append(line)

    with open(output_fn, 'w') as gtf_out:
        for trx_id in trx_id_lst:
            gtf_out.writelines(valid_gtf_records[trx_id]['GTF'])
    with open("/tmp/dup.gtf", 'w') as dup_out:
        for trx_id in trx_id_lst:
            if trx_id in dup_gtf_records:
                dup_out.writelines(dup_gtf_records[trx_id]['GTF'])

#
# rule link_ref:
#     input: ref_dir + "./genome.fa"
#     output: ref_dir + "./RSEMIndex/genome.fa"
#     shell: "ln -sf {input} {output}\n touch {output}"
RSEM_IDX= [os.path.join(ref_base,  "RSEMIndex", "genome.{}.ebwt").format(i) for i in range(1,5)]\
          + [os.path.join(ref_base,  "RSEMIndex","genome.rev.{}.ebwt").format(i) for i in [1,2]]
rule rsem_index:
    input:
        fa = os.path.join(ref_base, "genome.fa"),
        gtf= os.path.join(ref_base, "annotation", "genes.gtf")
    output: RSEM_IDX
    log: "logs/reference_index.log"
    params:
        mem = "2G",
        ref = os.path.join(ref_base, "RSEMIndex","genome")
    message: "\n    Make RSEM index with reference sequence and gene annotation"
    run:
        #clean_GTF(input.gtf, 'gene_cleaned.gtf')
        shell("{RSEM}/rsem-prepare-reference --gtf {input.gtf} --bowtie --bowtie-path {BOWTIE} {input.fa} {params.ref}")
        shell("ln -s {input.fa} {ref_base}/RSEMIndex/genome.fa")

